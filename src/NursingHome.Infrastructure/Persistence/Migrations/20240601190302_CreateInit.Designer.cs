// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NursingHome.Infrastructure.Persistence.Data;

#nullable disable

namespace NursingHome.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240601190302_CreateInit")]
    partial class CreateInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NursingHome.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("VistedDay")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.AppointmentUser", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.HasKey("AppointmentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentUsers");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("double");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(24)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.BillDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("BillId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("PackageId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<int>("TotalFloor")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.CareSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("CareSchedules");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.CareScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("CareScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CareScheduleId");

                    b.ToTable("CareScheduleTasks");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressCustomer")
                        .HasColumnType("longtext");

                    b.Property<string>("CCCD")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageContract")
                        .HasColumnType("longtext");

                    b.Property<string>("NameCustomer")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonForCanceling")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SigningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(24)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ElderId");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Elder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("InDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("PriceRegister")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Elders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderPackage", b =>
                {
                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("char(36)");

                    b.HasKey("ElderId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("ElderPackages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderPackageRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NamePackage")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ElderId");

                    b.HasIndex("PackageId");

                    b.ToTable("ElderPackageRegisters");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderUser", b =>
                {
                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ElderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ElderUsers");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.FeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageFeedBack")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResolvedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ElderId");

                    b.HasIndex("UserId");

                    b.ToTable("HealthReports");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HealthReportCategories");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("HealthReportCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthReportId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<float>("Result")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HealthReportCategoryId");

                    b.HasIndex("HealthReportId");

                    b.ToTable("HealthReportDetails");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("CCCD")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.NurseElder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DutyDay")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ElderId");

                    b.HasIndex("UserId");

                    b.ToTable("NurseElders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMonth")
                        .HasColumnType("int");

                    b.Property<int>("DurationTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePackage")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberBed")
                        .HasColumnType("int");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.PackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<Guid>("BillId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AvailableBed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("BlockId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("float");

                    b.Property<float>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("TotalBed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UnusedBed")
                        .HasColumnType("int");

                    b.Property<int>("UserBed")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("PackageId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.UserCareSchedule", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<long>("CareScheduleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "CareScheduleId");

                    b.HasIndex("CareScheduleId");

                    b.ToTable("UserCareSchedules");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.AppointmentUser", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentUsers")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("AppointmentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Bill", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.BillDetail", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Package", "Package")
                        .WithMany("BillDetails")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.CareSchedule", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Room", "Room")
                        .WithMany("CareSchedules")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.CareScheduleTask", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.CareSchedule", "CareSchedule")
                        .WithMany("CareScheduleTasks")
                        .HasForeignKey("CareScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareSchedule");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Contract", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("Contracts")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Device", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Elder", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Room", "Room")
                        .WithMany("Elders")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderPackage", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("ElderPackages")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Package", "Package")
                        .WithMany("ElderPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderPackageRegister", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("ElderPackageRegisters")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Package", "Package")
                        .WithMany("ElderPackageRegisters")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderUser", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("ElderUsers")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("ElderUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Package", "Package")
                        .WithMany("FeedBacks")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReport", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("HealthReports")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("HealthReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetail", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.HealthReportCategory", "HealthReportCategory")
                        .WithMany("HealthReportDetails")
                        .HasForeignKey("HealthReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.HealthReport", "HealthReport")
                        .WithMany("HealthReportDetails")
                        .HasForeignKey("HealthReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthReport");

                    b.Navigation("HealthReportCategory");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.RoleClaim", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserClaim", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserLogin", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserRole", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserToken", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Notification", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.NurseElder", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("NurseElders")
                        .HasForeignKey("ElderId");

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("NurseElders")
                        .HasForeignKey("UserId");

                    b.Navigation("Elder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Package", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.PackageType", "PackageType")
                        .WithMany("Packages")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageType");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Payment", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Room", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Block", "Block")
                        .WithMany("Rooms")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Package", "Package")
                        .WithMany("Rooms")
                        .HasForeignKey("PackageId");

                    b.Navigation("Block");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.UserCareSchedule", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.CareSchedule", "CareSchedule")
                        .WithMany("UserCareSchedules")
                        .HasForeignKey("CareScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("UserCareSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentUsers");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Block", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.CareSchedule", b =>
                {
                    b.Navigation("CareScheduleTasks");

                    b.Navigation("UserCareSchedules");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Elder", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("ElderPackageRegisters");

                    b.Navigation("ElderPackages");

                    b.Navigation("ElderUsers");

                    b.Navigation("HealthReports");

                    b.Navigation("NurseElders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReport", b =>
                {
                    b.Navigation("HealthReportDetails");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportCategory", b =>
                {
                    b.Navigation("HealthReportDetails");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.User", b =>
                {
                    b.Navigation("AppointmentUsers");

                    b.Navigation("Bills");

                    b.Navigation("Contracts");

                    b.Navigation("Devices");

                    b.Navigation("ElderUsers");

                    b.Navigation("FeedBacks");

                    b.Navigation("HealthReports");

                    b.Navigation("Notifications");

                    b.Navigation("NurseElders");

                    b.Navigation("Payments");

                    b.Navigation("UserCareSchedules");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Package", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("ElderPackageRegisters");

                    b.Navigation("ElderPackages");

                    b.Navigation("FeedBacks");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.PackageType", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Room", b =>
                {
                    b.Navigation("CareSchedules");

                    b.Navigation("Elders");
                });
#pragma warning restore 612, 618
        }
    }
}
