// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NursingHome.Infrastructure.Persistence.Data;

#nullable disable

namespace NursingHome.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240607192559_CreateInit")]
    partial class CreateInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NursingHome.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("TotalRoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SigningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ElderId");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Elder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Elders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderNursingPackage", b =>
                {
                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NursingPackageId")
                        .HasColumnType("char(36)");

                    b.HasKey("ElderId", "NursingPackageId");

                    b.HasIndex("NursingPackageId");

                    b.ToTable("ElderNursingPackages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderServicePackage", b =>
                {
                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("char(36)");

                    b.HasKey("ElderId", "ServicePackageId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ElderServicePackages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("HealthCategories");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ElderId");

                    b.ToTable("HealthReports");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("HealthCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthReportId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCategoryId");

                    b.HasIndex("HealthReportId");

                    b.ToTable("HealthReportDetails");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetailMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("HealthReportDetailId")
                        .HasColumnType("bigint");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HealthReportDetailId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("HealthReportDetailMeasures");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("CCCD")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HealthCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HealthCategoryId");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodType")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ElderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Height")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("UnderlyingDisease")
                        .HasColumnType("longtext");

                    b.Property<string>("Weight")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ElderId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.NursingPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NursingPackages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.NursingPackageUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NursingPackageId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "NursingPackageId");

                    b.HasIndex("NursingPackageId");

                    b.ToTable("NursingPackageUsers");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NursingPackageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ServicePackageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("NursingPackageId");

                    b.HasIndex("ServicePackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.OrderDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDates");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AvailableBed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("BlockId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalBed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UnusedBed")
                        .HasColumnType("int");

                    b.Property<int>("UserBed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationLimit")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackageCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TimeBetweenServices")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServicePackageCategoryId");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServicePackageCategories");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackageDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ServicePackageDates");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackageUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "ServicePackageId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ServicePackageUsers");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Contract", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("Contracts")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Device", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Elder", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Room", "Room")
                        .WithMany("Elders")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Elders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderNursingPackage", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("ElderNursingPackages")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.NursingPackage", "NursingPackage")
                        .WithMany("ElderNursingPackages")
                        .HasForeignKey("NursingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("NursingPackage");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ElderServicePackage", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("ElderServicePackages")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.ServicePackage", "ServicePackage")
                        .WithMany("ElderServicePackages")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Order", "Order")
                        .WithOne("FeedBack")
                        .HasForeignKey("NursingHome.Domain.Entities.FeedBack", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReport", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithMany("HealthReports")
                        .HasForeignKey("ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetail", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.HealthCategory", "HealthCategory")
                        .WithMany("HealthReportDetails")
                        .HasForeignKey("HealthCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.HealthReport", "HealthReport")
                        .WithMany("HealthReportDetails")
                        .HasForeignKey("HealthReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCategory");

                    b.Navigation("HealthReport");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetailMeasure", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.HealthReportDetail", "HealthReportDetail")
                        .WithMany("HealthReportDetailMeasures")
                        .HasForeignKey("HealthReportDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.MeasureUnit", "MeasureUnit")
                        .WithMany("HealthReportDetailMeasures")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthReportDetail");

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.RoleClaim", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserClaim", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserLogin", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserRole", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.UserToken", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.MeasureUnit", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.HealthCategory", "HealthCategory")
                        .WithMany("MeasureUnits")
                        .HasForeignKey("HealthCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCategory");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Elder", "Elder")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("NursingHome.Domain.Entities.MedicalRecord", "ElderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elder");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Notification", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.NursingPackageUser", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.NursingPackage", "NursingPackage")
                        .WithMany("NursingPackageUsers")
                        .HasForeignKey("NursingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("NursingPackageUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NursingPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Order", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.NursingPackage", "NursingPackage")
                        .WithMany("Orders")
                        .HasForeignKey("NursingPackageId");

                    b.HasOne("NursingHome.Domain.Entities.ServicePackage", "ServicePackage")
                        .WithMany("Orders")
                        .HasForeignKey("ServicePackageId");

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NursingPackage");

                    b.Navigation("ServicePackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.OrderDate", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Order", "Order")
                        .WithMany("OrderDates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Room", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.Block", "Block")
                        .WithMany("Rooms")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackage", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.ServicePackageCategory", "ServicePackageCategory")
                        .WithMany("ServicePackages")
                        .HasForeignKey("ServicePackageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePackageCategory");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackageDate", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.ServicePackage", "ServicePackage")
                        .WithMany("ServiceDate")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackageUser", b =>
                {
                    b.HasOne("NursingHome.Domain.Entities.ServicePackage", "ServicePackage")
                        .WithMany("ServicePackageUsers")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NursingHome.Domain.Entities.Identities.User", "User")
                        .WithMany("ServicePackageUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Block", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Elder", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("ElderNursingPackages");

                    b.Navigation("ElderServicePackages");

                    b.Navigation("HealthReports");

                    b.Navigation("MedicalRecord")
                        .IsRequired();
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthCategory", b =>
                {
                    b.Navigation("HealthReportDetails");

                    b.Navigation("MeasureUnits");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReport", b =>
                {
                    b.Navigation("HealthReportDetails");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.HealthReportDetail", b =>
                {
                    b.Navigation("HealthReportDetailMeasures");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Identities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Contracts");

                    b.Navigation("Devices");

                    b.Navigation("Elders");

                    b.Navigation("Notifications");

                    b.Navigation("NursingPackageUsers");

                    b.Navigation("Orders");

                    b.Navigation("ServicePackageUsers");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.MeasureUnit", b =>
                {
                    b.Navigation("HealthReportDetailMeasures");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.NursingPackage", b =>
                {
                    b.Navigation("ElderNursingPackages");

                    b.Navigation("NursingPackageUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Order", b =>
                {
                    b.Navigation("FeedBack")
                        .IsRequired();

                    b.Navigation("OrderDates");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.Room", b =>
                {
                    b.Navigation("Elders");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackage", b =>
                {
                    b.Navigation("ElderServicePackages");

                    b.Navigation("Orders");

                    b.Navigation("ServiceDate");

                    b.Navigation("ServicePackageUsers");
                });

            modelBuilder.Entity("NursingHome.Domain.Entities.ServicePackageCategory", b =>
                {
                    b.Navigation("ServicePackages");
                });
#pragma warning restore 612, 618
        }
    }
}
